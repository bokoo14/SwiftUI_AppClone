//
//  UserModel.swift
//  KakaoBank
//
//  Created by Bokyung on 2023/08/12.
//

import SwiftUI

// User -> Bankbook -> Transaction

// MARK: 사용자(현재 앱을 실행 중인 유저)
struct UserModel: Identifiable {
    var id: UUID = UUID() // 사용자의 고유한 아이디 -> 후보키, 대체키
    var userID: String // 사용자의 고유한 아이디 -> 후보키, 기본키(Primary key)⭐️
    var userName: String // 사용자의 이름
    var userProfileTitle: String // 사용자의 프로필 이미지
    var bankName: String // 사용자의 은행
    // 실제라면 아이디, 비번, 주민등록 번호, 주소가 추가적으로 저장되어 있을듯
}

// MARK: 후보키
/**
 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용하는 속성들의 부분집합
 즉, 기본키로 사용할 수 있는 속성들을 말함
 모든 릴레이션은 반드시 하나 이상의 후보키를 가져야함
 e.g. <학생>릴레이션(테이블)에서 학번이나 주민번호는 다른 레코드에서 유일하게 구별할 수 있는 기본키로 사용할 수 있음으로 후보키
 */

// MARK: 기본키⭐️
/**
 후보키 중에서 선택한 주키(Main Key)
 한 릴레이션에서 특정 튜플을 유일하게 구별할 수 있는 속성
 Null 값을 가질 수 없음
 기본키로 정의된 속성에는 동일한 값이 중복되어 저장될 수 없음
 e.g. <학생>릴레이션(테이블)에서 학번이나 주민번호가 기본키가 될 수 있음,
 <수강>릴레이션(테이블)에서 학번+과목명을 조합하여 기본키가 될 수 있음
 */

// MARK: 대체키
/**
 후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키들을 말함
 보조키라고도 함
 e.g. <학생>릴레이션(테이블)에서 학번을 기본키로 정의하면, 주민번호는 대체키가 됨
 */


// MARK: 슈퍼키
/**
 슈퍼키는 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키로서 릴레이션을 구성하는 모든 튜플 중 슈퍼키로 구성된 속성과 집합은 동일한 값을 나타내지 않는다
 릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족시키지만, 최소성은 만족시키지 못함
 e.g. <학생>릴레이션(테이블)에서 학번, 주민번호, 학번+주민번호, 주민번호+성명, 학번+주민번호+성명 등으로 슈퍼키를 구성할 수 있다.
 */

// MARK: 외래키⭐️
/**
 관계(Relation)를 맺고 있는 릴레이션 R1, R2에서 릴레이션 R1이 참조하고 있는 릴레이션 R2의 기본키와 같은 R1 릴레이션의 속성
 외래키로 지정되면 참조 테이블의 기본키에는 없는 값을 입력할 수 없음
 e.g. <수강>릴레이션(테이블)이 <학생>릴레이션(테이블)을 참조하고 있으므로 <학생>릴레이션의 학번은 기본키이고, <수강>릴레이션의 학번은 외래키이다
 <수강>릴레이션의 학번에는 <학생>릴레이션의 학번에 없는 값을 입력할 수 없다
 */

// MARK: 데이터베이스 설계
// https://velog.io/@inyong_pang/Database-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84-%EB%B0%8F-%EA%B5%AC%EC%A1%B0






